[{"title":"Getting Started","type":0,"sectionRef":"#","url":"/LuArray-U/docs/intro","content":"Getting Started To get started with using the LuArray-U library, you need to require it in your Lua script. You can do this by using the require function. local LuArray = require(&quot;LuArray&quot;) If you're on the Roblox end of things: local ReplicatedStorage = game:GetService(&quot;ReplicatedStorage&quot;) local LuArray = require(ReplicatedStorage.LuArray) ","keywords":""},{"title":"ArrayIterator","type":0,"sectionRef":"#","url":"/LuArray-U/api/ArrayIterator","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"ArrayIterator","url":"/LuArray-U/api/ArrayIterator#functions","content":" "},{"title":"new​","type":1,"pageTitle":"ArrayIterator","url":"/LuArray-U/api/ArrayIterator#new","content":"since 1.0.0 &lt;/&gt; ArrayIterator.new( existingArray: Array&lt;T&gt;, arrayModule: {any} ) → ArrayIterator&lt;T&gt; Creates a new iterator for the array.  "},{"title":"Next​","type":1,"pageTitle":"ArrayIterator","url":"/LuArray-U/api/ArrayIterator#Next","content":"Chainable since 1.0.0 &lt;/&gt; ArrayIterator:Next() → ArrayIterator&lt;T&gt; Increases the pointer forward an index.  "},{"title":"Previous​","type":1,"pageTitle":"ArrayIterator","url":"/LuArray-U/api/ArrayIterator#Previous","content":"Chainable since 1.0.0 &lt;/&gt; ArrayIterator:Previous() → ArrayIterator&lt;T&gt; Decreases the pointer forward an index. "},{"title":"Array","type":0,"sectionRef":"#","url":"/LuArray-U/api/Array","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Array","url":"/LuArray-U/api/Array#functions","content":" "},{"title":"_new​","type":1,"pageTitle":"Array","url":"/LuArray-U/api/Array#_new","content":"since 1.0.0 &lt;/&gt; Array._new( _forceCreation: boolean, ...: T ) → Array&lt;T&gt; Creates a new Array with force if needed, eliminating the length of an array from being used when true.  "},{"title":"new​","type":1,"pageTitle":"Array","url":"/LuArray-U/api/Array#new","content":"since 1.0.0 &lt;/&gt; Array.new(...: T) → Array&lt;T&gt; Creates a new Array.  "},{"title":"isArray​","type":1,"pageTitle":"Array","url":"/LuArray-U/api/Array#isArray","content":"since 1.0.0 &lt;/&gt; Array.isArray(array: Array&lt;T&gt;) → boolean Checks if the passed argument is a valid Array object.  "},{"title":"from​","type":1,"pageTitle":"Array","url":"/LuArray-U/api/Array#from","content":"since 1.0.0 &lt;/&gt; Array.from(item: T) → Array&lt;T&gt; Creates a new Array from a single argument, allowing for a callback IF the argument supplied is a lua table.  "},{"title":"of​","type":1,"pageTitle":"Array","url":"/LuArray-U/api/Array#of","content":"since 1.0.0 &lt;/&gt; Array.of(...: T) → Array&lt;T&gt; Creates a new Array from a variable number of arguments. local myArray = Array.of(&quot;foo&quot;, &quot;bar&quot;, 2, false, true, 6) print(myArray[2]) -- &quot;bar&quot;   "},{"title":"map​","type":1,"pageTitle":"Array","url":"/LuArray-U/api/Array#map","content":"Chainable since 1.0.0 &lt;/&gt; Array:map(Callback: ( data: T, index: number, array: {T} ) → T) → Array Creates a new Array from a variable number of arguments. local myArray = Array.new(1,2,3,4) myArray:map(function(x: number) return x * 2 end)   "},{"title":"flat​","type":1,"pageTitle":"Array","url":"/LuArray-U/api/Array#flat","content":"Chainable since 1.0.0 &lt;/&gt; Array:flat(depth: number?) → Array Returns a new Array that was recursively concatenated with all sub-array/tables within the Array until the depth is reached. local myArray = Array.new(1, {2, {3, 4}}) myArray:flat() -- Array [ 1, 2, Array [ 3, 4 ] ]   "},{"title":"flatMap​","type":1,"pageTitle":"Array","url":"/LuArray-U/api/Array#flatMap","content":"Chainable since 1.0.0 &lt;/&gt; Array:flatMap(Callback: (( data: T, index: number, array: {T} ) → T)?) → Array&lt;T&gt; Performs a Map on the array followed by the Flat method with a depth of 1. Unlike JavaScript's implementation, this method is slightly slower than calling individually. local myArray = Array.new(1, 2, 1) myArray:flatMap(function(data: number) return data == 2 and { 2, 2 } or data end) -- Array [ 1, 2, 2, 1 ]   "},{"title":"reduce​","type":1,"pageTitle":"Array","url":"/LuArray-U/api/Array#reduce","content":"Chainable since 1.0.0 &lt;/&gt; Array:reduce( Callback: ( accumulator: T, currentValue: T ) → T, initialValue: K? ) → K I don't know how to explain this, but mdn web docs do it best. local myArray = Array.new(1, 2, 3, 4) local initialValue = 0 print( myArray:reduce( function(accumulator: number, value: number) return accumulator + value end, initialValue ) ) --&gt; 10   "},{"title":"reduceRight​","type":1,"pageTitle":"Array","url":"/LuArray-U/api/Array#reduceRight","content":"Chainable since 1.0.0 &lt;/&gt; Array:reduceRight( Callback: ( accumulator: T, currentValue: T ) → T, initialValue: K? ) → K Does the same thing as reduce but backwards. local myArray = Array.new(1, 2, 3, 4) local initialValue = 0 print( myArray:reduceRight( function(accumulator: number, value: number) return accumulator + value end, initialValue ) ) --&gt; 10   "},{"title":"some​","type":1,"pageTitle":"Array","url":"/LuArray-U/api/Array#some","content":"since 1.0.0 &lt;/&gt; Array:some(Callback: ( data: T, index: number, array: {T} ) → boolean) → boolean Creates a new Array from a variable number of arguments. local myArray = Array.new(1, 2, 3, 4, 5) if myArray:some( function(x: number) return x == 3 end ) then print(&quot;Good!&quot;) end   "},{"title":"filter​","type":1,"pageTitle":"Array","url":"/LuArray-U/api/Array#filter","content":"since 1.0.0 &lt;/&gt; Array:filter(Callback: ( data: T, index: number, array: {T} ) → boolean) → arrayPriv&lt;any&gt; Filters the array with the given callback function and returns the filtered table. local myArray = Array.new(1, 2, 3, 4, 5) local filtered = myArray:filter(function(x: number) return x &gt; 3 end) -- { 4, 5 }   "},{"title":"find​","type":1,"pageTitle":"Array","url":"/LuArray-U/api/Array#find","content":"since 1.0.0 &lt;/&gt; Array:find(Callback: ( data: T, index: number, array: {T} ) → boolean) → T? Finds a singular value within the array and returns it. local myArray = Array.new(5, 12, 50, 130, 44) local filtered = myArray:find(function(x: number) return x &gt; 3 end) -- 4   "},{"title":"findIndex​","type":1,"pageTitle":"Array","url":"/LuArray-U/api/Array#findIndex","content":"since 1.0.0 &lt;/&gt; Array:findIndex(Callback: ( data: T, index: number, array: {T} ) → boolean) → ( T?, number? ) Finds a singular index within the array and returns it. local myArray = Array.new(5, 12, 50, 130, 44) local filtered = myArray:findIndex(function(x: number) return x &gt; 3 end) -- 4, 4   "},{"title":"findLast​","type":1,"pageTitle":"Array","url":"/LuArray-U/api/Array#findLast","content":"since 1.0.0 &lt;/&gt; Array:findLast(Callback: ( data: T, index: number, array: {T} ) → boolean) → T? Finds a singular value within the array starting from the end and returns it. local myArray = Array.new(5, 12, 50, 130, 44) print(myArray:findLast(function(x: number) return x &gt; 3 end)) -- 44   "},{"title":"findLastIndex​","type":1,"pageTitle":"Array","url":"/LuArray-U/api/Array#findLastIndex","content":"since 1.0.0 &lt;/&gt; Array:findLastIndex(Callback: ( data: T, index: number, array: {T} ) → boolean) → number? Finds a singular index within the array starting from the end and returns it. local myArray = Array.new(5, 12, 50, 130, 44) print(myArray:findLastIndex(function(x: number) return x &gt; 45 end)) -- 4 | Array[4] = 130   "},{"title":"includes​","type":1,"pageTitle":"Array","url":"/LuArray-U/api/Array#includes","content":"since 1.0.0 &lt;/&gt; Array:includes(item: T) → boolean Finds a singular value within the array and returns it's information. local myArray = Array.new(&quot;dog&quot;, &quot;duck&quot;, &quot;cat&quot;, &quot;bird&quot;) local hasCat = myArray:includes(&quot;cat&quot;) -- true local hasAlligator = myArray:includes(&quot;alligator&quot;) -- false   "},{"title":"slice​","type":1,"pageTitle":"Array","url":"/LuArray-U/api/Array#slice","content":"since 1.0.0 &lt;/&gt; Array:slice( Start: number?, End: number? ) → {T} Splits the array up into a portion selected by the Start and End parameters. local myArray = Array.new(&quot;ant&quot;, &quot;bison&quot;, &quot;camel&quot;, &quot;duck&quot;, &quot;elephant&quot;) local sliced = myArray:slice(3, -1) -- { &quot;camel&quot;, &quot;duck&quot; }   "},{"title":"forEach​","type":1,"pageTitle":"Array","url":"/LuArray-U/api/Array#forEach","content":"Chainable since 1.0.0 &lt;/&gt; Array:forEach( Callback: Callback: ( data: T, index: number, array: {T} ) → (), _reverse: boolean? ) → Array&lt;T&gt; Performs a for loop on the array with a given callback which doesn't affect any entries. local myArray = Array.new(&quot;ant&quot;, &quot;bison&quot;, &quot;camel&quot;, &quot;duck&quot;, &quot;elephant&quot;) myArray:forEach(print)   "},{"title":"every​","type":1,"pageTitle":"Array","url":"/LuArray-U/api/Array#every","content":"since 1.0.0 &lt;/&gt; Array:every(Callback: Callback: ( data: T, index: number, array: {T} ) → boolean) → boolean Performs a test on every element within the array to ensure they all pass. local myArray = Array.new(&quot;ant&quot;, &quot;bison&quot;, &quot;camel&quot;, &quot;duck&quot;, &quot;elephant&quot;) myArray:every(function(animal: string) return string.len(animal) &gt; 2 end) -- true   "},{"title":"push​","type":1,"pageTitle":"Array","url":"/LuArray-U/api/Array#push","content":"since 1.0.0 &lt;/&gt; Array:push(...: T) → arrayPriv&lt;any&gt; Adds new element(s) onto the end of the array. local myArray = Array.new(&quot;ant&quot;, &quot;bison&quot;, &quot;camel&quot;, &quot;duck&quot;, &quot;elephant&quot;) myArray:push(&quot;duck&quot;, &quot;elephant&quot;) -- { &quot;ant&quot;, &quot;bison&quot;, &quot;camel&quot;, &quot;duck&quot;, &quot;elephant&quot;, &quot;duck&quot;, &quot;elephant&quot; }   "},{"title":"pop​","type":1,"pageTitle":"Array","url":"/LuArray-U/api/Array#pop","content":"since 1.0.0 &lt;/&gt; Array:pop() → T Removes the last element within the array and returns whatever it's value is. local myArray = Array.new(&quot;ant&quot;, &quot;bison&quot;, &quot;camel&quot;, &quot;duck&quot;, &quot;elephant&quot;) myArray:pop() -- &quot;elephant&quot; myArray:pop() -- &quot;duck&quot;   "},{"title":"sort​","type":1,"pageTitle":"Array","url":"/LuArray-U/api/Array#sort","content":"Chainable since 1.0.0 &lt;/&gt; Array:sort(Callback: (( a: T, b: T ) → boolean)?) → Array&lt;T&gt; Uses QuickSort under the hood to complete this operation, if you'd like to use it directly with specifying a start and end indices please use Array:_quickSort local myArray = Array.new(&quot;ant&quot;, &quot;bison&quot;, &quot;camel&quot;, &quot;duck&quot;, &quot;elephant&quot;) myArray:sort(function(first: string, second: string) local firstChar, secondChar = string.sub(first, 1, 1), string.sub(second, 1, 1) return string.byte(firstChar) &gt; string.byte(secondChar) end) --&gt; &quot;elephant&quot;, &quot;duck&quot;, &quot;camel&quot;, &quot;bison&quot;, &quot;ant&quot;   "},{"title":"reverse​","type":1,"pageTitle":"Array","url":"/LuArray-U/api/Array#reverse","content":"Chainable since 1.0.0 &lt;/&gt; Array:reverse() → {T} Removes the last element within the array and returns whatever it's value is. local myArray = Array.new(&quot;ant&quot;, &quot;bison&quot;, &quot;camel&quot;, &quot;duck&quot;, &quot;elephant&quot;) myArray:pop() -- &quot;elephant&quot; myArray:pop() -- &quot;duck&quot; warning This method mutates the original array, please use toReversed() if you'd prefer this method without mutations.  "},{"title":"splice​","type":1,"pageTitle":"Array","url":"/LuArray-U/api/Array#splice","content":"Chainable since 1.0.0 &lt;/&gt; Array:splice( index: number, deleteCount: number, ...: T ) → Array&lt;T&gt; Changes the contents within the array by removing/replacing/adding new elements. local myArray = Array.new(&quot;ant&quot;, &quot;bison&quot;, &quot;camel&quot;, &quot;duck&quot;, &quot;elephant&quot;) myArray:splice(1, 1, &quot;spider&quot;) print(myArray[1]) -- &quot;spider&quot;   "},{"title":"fill​","type":1,"pageTitle":"Array","url":"/LuArray-U/api/Array#fill","content":"Chainable since 1.0.0 &lt;/&gt; Array:fill(...: any) → Array&lt;T&gt; Changes all elements within the array with a static value at a given start position. local myArray = Array.new(1, 2, 3, 4) myArray:fill(0, 2, 4) --&gt; 1, 2, 0, 0 myArray:fill(5, 1) --&gt; 1, 5, 5, 5 myArray:fill(4) --&gt; 4, 4, 4, 4   "},{"title":"values​","type":1,"pageTitle":"Array","url":"/LuArray-U/api/Array#values","content":"since 1.0.0 &lt;/&gt; Array:values() → {T} Returns the internal table that holds all the values. local myArray = Array.new(1, 2, 3, 4) print(myArray:values()) --&gt; { 1, 2, 3, 4 }   "},{"title":"entries​","type":1,"pageTitle":"Array","url":"/LuArray-U/api/Array#entries","content":"since 1.0.0 &lt;/&gt; Array:entries() → ArrayIterator&lt;T&gt; Returns an iterator object that contains the key/value pairs for each array index. local myArray = Array.new(&quot;ant&quot;, &quot;bison&quot;, &quot;camel&quot;) local myIterator = myArray:entries() print(myIterator:next().Value) --&gt; Array [ 1, &quot;ant&quot; ] print(myIterator:next().Value) --&gt; Array [ 2, &quot;bison&quot; ]   "},{"title":"toSpliced​","type":1,"pageTitle":"Array","url":"/LuArray-U/api/Array#toSpliced","content":"since 1.0.0 &lt;/&gt; Array:toSpliced( index: number, deleteCount: number, ...: T ) → Array&lt;T&gt; Returns a new Array after splice has been invoked.  "},{"title":"toReversed​","type":1,"pageTitle":"Array","url":"/LuArray-U/api/Array#toReversed","content":"since 1.0.0 &lt;/&gt; Array:toReversed() → Array&lt;T&gt; Returns a new Array after reverse has been invoked.  "},{"title":"toSorted​","type":1,"pageTitle":"Array","url":"/LuArray-U/api/Array#toSorted","content":"since 1.0.0 &lt;/&gt; Array:toSorted(Callback: (( a: T, b: T ) → boolean)?) → Array&lt;T&gt; Returns a new Array after sort has been invoked.  "},{"title":"lastIndexOf​","type":1,"pageTitle":"Array","url":"/LuArray-U/api/Array#lastIndexOf","content":"since 1.0.0 &lt;/&gt; Array:lastIndexOf(item: any) → number? Provides the index starting from the back of the Array. This will return nil if no value is present.  "},{"title":"at​","type":1,"pageTitle":"Array","url":"/LuArray-U/api/Array#at","content":"since 1.0.0 &lt;/&gt; Array:at(index: number?) → T? Returns the element at a given index. local myArray = Array.new(&quot;ant&quot;, &quot;bison&quot;, &quot;camel&quot;, &quot;duck&quot;, &quot;elephant&quot;) myArray:Destroy() -- Once used this can't be used again.   "},{"title":"concat​","type":1,"pageTitle":"Array","url":"/LuArray-U/api/Array#concat","content":"Chainable since 1.0.0 &lt;/&gt; Array:concat(...: any) → Array&lt;T&gt; Merges one or more into a single Array. local myArray = Array.new(&quot;ant&quot;, &quot;bison&quot;) local secondArray = Array.new(1, 2, 3) myArray:concat(secondArray) -- Array [ &quot;ant&quot;, &quot;bison&quot;, 1, 2, 3 ]   "},{"title":"join​","type":1,"pageTitle":"Array","url":"/LuArray-U/api/Array#join","content":"since 1.0.0 &lt;/&gt; Array:join(separator: string) → string Joins the array based on the separator. local myArray = Array.new(&quot;ant&quot;, &quot;bison&quot;) print(myArray:join(&quot;-&quot;)) -- &quot;ant-bison&quot;   "},{"title":"with​","type":1,"pageTitle":"Array","url":"/LuArray-U/api/Array#with","content":"since 1.0.0 &lt;/&gt; Array:with( index: number, value: any ) → Array&lt;T&gt; Mimics bracket-notation, returning a new Array with the index replaced with the value. local myArray = Array.new(&quot;ant&quot;, &quot;bison&quot;, &quot;camel&quot;) local fixedArray = myArray:with(3, &quot;Cone&quot;) -- Array [ &quot;ant&quot;, &quot;bison&quot;, &quot;Cone&quot; ]   "},{"title":"indexOf​","type":1,"pageTitle":"Array","url":"/LuArray-U/api/Array#indexOf","content":"since 1.0.0 &lt;/&gt; Array:indexOf(item: any) → number Finds the index of an element from left to right. Returns a -1 if the element can't be found. local myArray = Array.new(&quot;ant&quot;, &quot;bison&quot;, &quot;camel&quot;) print(myArray:indexOf(&quot;bison&quot;)) -- 2   "},{"title":"unshift​","type":1,"pageTitle":"Array","url":"/LuArray-U/api/Array#unshift","content":"since 1.0.0 &lt;/&gt; Array:unshift(...: any) → number Adds element(s) to the beginning of the array and returns the length. local myArray = Array.new(&quot;ant&quot;, &quot;bison&quot;, &quot;camel&quot;) print(myArray:unshift(&quot;something&quot;)) -- 4 print(myArray:join(&quot;,&quot;)) -- &quot;something,ant,bison,camel&quot;   "},{"title":"shift​","type":1,"pageTitle":"Array","url":"/LuArray-U/api/Array#shift","content":"since 1.0.0 &lt;/&gt; Array:shift() → T Removes a single element from the beginning of the Array and returns it's value. local myArray = Array.new(&quot;ant&quot;, &quot;bison&quot;, &quot;camel&quot;) print(myArray:shift()) -- &quot;ant&quot; print(myArray:join(&quot;,&quot;)) -- &quot;bison,camel&quot;   "},{"title":"Destroy​","type":1,"pageTitle":"Array","url":"/LuArray-U/api/Array#Destroy","content":"since 1.0.0 &lt;/&gt; Array:Destroy() → nil Clears the Array and prepares it for garbage collection. local myArray = Array.new(&quot;ant&quot;, &quot;bison&quot;, &quot;camel&quot;, &quot;duck&quot;, &quot;elephant&quot;) myArray:Destroy() -- Once used this can't be used again.  "}]