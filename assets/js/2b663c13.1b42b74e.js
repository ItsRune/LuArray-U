"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[184],{57160:e=>{e.exports=JSON.parse('{"functions":[{"name":"_new","desc":"Creates a new Array with force if needed, eliminating the length of an array from being used when `true`.","params":[{"name":"_forceCreation","desc":"","lua_type":"boolean"},{"name":"...","desc":"","lua_type":"T"}],"returns":[{"desc":"","lua_type":"Array<T>"}],"function_type":"static","since":"1.0.0","source":{"line":139,"path":"src/init.lua"}},{"name":"new","desc":"Creates a new Array.","params":[{"name":"...","desc":"","lua_type":"T"}],"returns":[{"desc":"","lua_type":"Array<T>"}],"function_type":"static","since":"1.0.0","source":{"line":179,"path":"src/init.lua"}},{"name":"isArray","desc":"Checks if the passed argument is a valid `Array` object.","params":[{"name":"array","desc":"","lua_type":"Array<T>"}],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"static","since":"1.0.0","source":{"line":192,"path":"src/init.lua"}},{"name":"from","desc":"Creates a new Array from a single argument, allowing for a callback IF the argument supplied is a lua table.","params":[{"name":"item","desc":"","lua_type":"T"}],"returns":[{"desc":"","lua_type":"Array<T>"}],"function_type":"static","since":"1.0.0","source":{"line":205,"path":"src/init.lua"}},{"name":"of","desc":"Creates a new Array from a variable number of arguments.\\n\\n```lua\\nlocal myArray = Array.of(\\"foo\\", \\"bar\\", 2, false, true, 6)\\nprint(myArray[2]) -- \\"bar\\"\\n```","params":[{"name":"...","desc":"","lua_type":"T"}],"returns":[{"desc":"","lua_type":"Array<T>"}],"function_type":"static","since":"1.0.0","source":{"line":231,"path":"src/init.lua"}},{"name":"_changeLoop","desc":"Main loop handler for changing data within the Array.","params":[{"name":"Callback","desc":"","lua_type":"(data: T, index: number, array: { T }) -> T"}],"returns":[{"desc":"","lua_type":"(T?, number?, { T }?)"}],"function_type":"method","tags":["Chainable"],"since":"1.0.0","private":true,"source":{"line":247,"path":"src/init.lua"}},{"name":"_filterLoop","desc":"Main loop handler for filtering data within the Array.","params":[{"name":"Callback","desc":"","lua_type":"(data: T, index: number, array: { T }) -> T"}],"returns":[{"desc":"","lua_type":"Array<T>"}],"function_type":"method","tags":["Chainable"],"since":"1.0.0","private":true,"source":{"line":273,"path":"src/init.lua"}},{"name":"_findLoop","desc":"Main loop handler for filtering data within the Array.","params":[{"name":"reversed","desc":"","lua_type":"boolean"},{"name":"Callback","desc":"","lua_type":"(data: T, index: number, array: { T }) -> T"}],"returns":[{"desc":"","lua_type":"(T?, number?, { T }?)"}],"function_type":"method","since":"1.0.0","private":true,"source":{"line":302,"path":"src/init.lua"}},{"name":"_swap","desc":"Swaps the `first` and `second` indices within the array.","params":[{"name":"first","desc":"","lua_type":"number"},{"name":"second","desc":"","lua_type":"number"}],"returns":[{"desc":"","lua_type":"()"}],"function_type":"method","since":"1.0.0","private":true,"source":{"line":339,"path":"src/init.lua"}},{"name":"_partition","desc":"Returns the pivot index of the array","params":[{"name":"Start","desc":"","lua_type":"number"},{"name":"End","desc":"","lua_type":"number"},{"name":"Callback","desc":"","lua_type":"(data: T, index: number, array: { T }) -> boolean"}],"returns":[{"desc":"","lua_type":"number"}],"function_type":"method","since":"1.0.0","private":true,"source":{"line":361,"path":"src/init.lua"}},{"name":"_quickSort","desc":"Sorts the array with the QuickSort algorithm.","params":[{"name":"Start","desc":"","lua_type":"number"},{"name":"End","desc":"","lua_type":"number"},{"name":"Callback","desc":"","lua_type":"(data: T, index: number, array: { T }) -> boolean"}],"returns":[{"desc":"","lua_type":"()"}],"function_type":"method","since":"1.0.0","private":true,"source":{"line":396,"path":"src/init.lua"}},{"name":"map","desc":"Creates a new Array from a variable number of arguments.\\n\\n```lua\\nlocal myArray = Array.new(1,2,3,4)\\nmyArray:map(function(x: number)\\n\\treturn x * 2\\nend)\\n```","params":[{"name":"Callback","desc":"","lua_type":"(data: T, index: number, array: { T }) -> T"}],"returns":[{"desc":"","lua_type":"Array"}],"function_type":"method","tags":["Chainable"],"since":"1.0.0","source":{"line":423,"path":"src/init.lua"}},{"name":"flat","desc":"Returns a new Array that was recursively concatenated with all sub-array/tables within the Array until the depth is reached.\\n\\n```lua\\nlocal myArray = Array.new(1, {2, {3, 4}})\\nmyArray:flat() -- Array [ 1, 2, Array [ 3, 4 ] ]\\n```","params":[{"name":"depth","desc":"","lua_type":"number?"}],"returns":[{"desc":"","lua_type":"Array"}],"function_type":"method","tags":["Chainable"],"since":"1.0.0","source":{"line":458,"path":"src/init.lua"}},{"name":"flatMap","desc":"Performs a `Map` on the array followed by the `Flat` method with a depth of **1**. Unlike JavaScript\'s implementation, this method is slightly slower than calling individually.\\n\\n```lua\\nlocal myArray = Array.new(1, 2, 1)\\nmyArray:flatMap(function(data: number)\\n\\treturn data == 2 and { 2, 2 } or data\\nend) -- Array [ 1, 2, 2, 1 ]\\n```","params":[{"name":"Callback","desc":"","lua_type":"((data: T, index: number, array: { T }) -> T)?"}],"returns":[{"desc":"","lua_type":"Array<T>"}],"function_type":"method","tags":["Chainable"],"since":"1.0.0","source":{"line":511,"path":"src/init.lua"}},{"name":"reduce","desc":"I don\'t know how to explain this, [but mdn web docs do it best.](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)\\n\\n```lua\\nlocal myArray = Array.new(1, 2, 3, 4)\\nlocal initialValue = 0\\nprint(\\n\\tmyArray:reduce(\\n\\t\\tfunction(accumulator: number, value: number)\\n\\t\\t\\treturn accumulator + value\\n\\t\\tend,\\n\\t\\tinitialValue\\n\\t)\\n) --\x3e 10\\n```","params":[{"name":"Callback","desc":"","lua_type":"(accumulator: T, currentValue: T) -> T"},{"name":"initialValue","desc":"","lua_type":"K?"}],"returns":[{"desc":"","lua_type":"K"}],"function_type":"method","tags":["Chainable"],"since":"1.0.0","source":{"line":543,"path":"src/init.lua"}},{"name":"reduceRight","desc":"Does the same thing as [reduce](/api/Array#reduce) but backwards.\\n\\n```lua\\nlocal myArray = Array.new(1, 2, 3, 4)\\nlocal initialValue = 0\\nprint(\\n\\tmyArray:reduceRight(\\n\\t\\tfunction(accumulator: number, value: number)\\n\\t\\t\\treturn accumulator + value\\n\\t\\tend,\\n\\t\\tinitialValue\\n\\t)\\n) --\x3e 10\\n```","params":[{"name":"Callback","desc":"","lua_type":"(accumulator: T, currentValue: T) -> T"},{"name":"initialValue","desc":"","lua_type":"K?"}],"returns":[{"desc":"","lua_type":"K"}],"function_type":"method","tags":["Chainable"],"since":"1.0.0","source":{"line":577,"path":"src/init.lua"}},{"name":"some","desc":"Creates a new Array from a variable number of arguments.\\n\\n```lua\\nlocal myArray = Array.new(1, 2, 3, 4, 5)\\n\\nif\\n\\tmyArray:some(\\n\\t\\tfunction(x: number)\\n\\t\\t\\treturn x == 3\\n\\t\\tend\\n\\t)\\nthen\\n\\tprint(\\"Good!\\")\\nend\\n```","params":[{"name":"Callback","desc":"","lua_type":"(data: T, index: number, array: { T }) -> boolean"}],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"method","since":"1.0.0","source":{"line":610,"path":"src/init.lua"}},{"name":"filter","desc":"Filters the array with the given callback function and returns the filtered table.\\n\\n```lua\\nlocal myArray = Array.new(1, 2, 3, 4, 5)\\nlocal filtered = myArray:filter(function(x: number)\\n\\treturn x > 3\\nend) -- { 4, 5 }\\n```","params":[{"name":"Callback","desc":"","lua_type":"(data: T, index: number, array: { T }) -> boolean"}],"returns":[{"desc":"","lua_type":"arrayPriv<any>\\r\\n"}],"function_type":"method","since":"1.0.0","source":{"line":641,"path":"src/init.lua"}},{"name":"find","desc":"Finds a singular value within the array and returns it.\\n\\n```lua\\nlocal myArray = Array.new(5, 12, 50, 130, 44)\\nlocal filtered = myArray:find(function(x: number)\\n\\treturn x > 3\\nend) -- 4\\n```","params":[{"name":"Callback","desc":"","lua_type":"(data: T, index: number, array: { T }) -> boolean"}],"returns":[{"desc":"","lua_type":"T?"}],"function_type":"method","since":"1.0.0","source":{"line":667,"path":"src/init.lua"}},{"name":"findIndex","desc":"Finds a singular index within the array and returns it.\\n\\n```lua\\nlocal myArray = Array.new(5, 12, 50, 130, 44)\\nlocal filtered = myArray:findIndex(function(x: number)\\n\\treturn x > 3\\nend) -- 4, 4\\n```","params":[{"name":"Callback","desc":"","lua_type":"(data: T, index: number, array: { T }) -> boolean"}],"returns":[{"desc":"","lua_type":"(T?, number?)"}],"function_type":"method","since":"1.0.0","source":{"line":688,"path":"src/init.lua"}},{"name":"findLast","desc":"Finds a singular value within the array starting from the end and returns it.\\n\\n```lua\\nlocal myArray = Array.new(5, 12, 50, 130, 44)\\nprint(myArray:findLast(function(x: number)\\n\\treturn x > 3\\nend)) -- 44\\n```","params":[{"name":"Callback","desc":"","lua_type":"(data: T, index: number, array: { T }) -> boolean"}],"returns":[{"desc":"","lua_type":"T?"}],"function_type":"method","since":"1.0.0","source":{"line":709,"path":"src/init.lua"}},{"name":"findLastIndex","desc":"Finds a singular index within the array starting from the end and returns it.\\n\\n```lua\\nlocal myArray = Array.new(5, 12, 50, 130, 44)\\nprint(myArray:findLastIndex(function(x: number)\\n\\treturn x > 45\\nend)) -- 4 | Array[4] = 130\\n```","params":[{"name":"Callback","desc":"","lua_type":"(data: T, index: number, array: { T }) -> boolean"}],"returns":[{"desc":"","lua_type":"number?"}],"function_type":"method","since":"1.0.0","source":{"line":730,"path":"src/init.lua"}},{"name":"includes","desc":"Finds a singular value within the array and returns it\'s information.\\n\\n```lua\\nlocal myArray = Array.new(\\"dog\\", \\"duck\\", \\"cat\\", \\"bird\\")\\nlocal hasCat = myArray:includes(\\"cat\\") -- true\\nlocal hasAlligator = myArray:includes(\\"alligator\\") -- false\\n```","params":[{"name":"item","desc":"","lua_type":"T"}],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"method","since":"1.0.0","source":{"line":750,"path":"src/init.lua"}},{"name":"slice","desc":"Splits the array up into a portion selected by the `Start` and `End` parameters.\\n\\n```lua\\nlocal myArray = Array.new(\\"ant\\", \\"bison\\", \\"camel\\", \\"duck\\", \\"elephant\\")\\nlocal sliced = myArray:slice(3, -1) -- { \\"camel\\", \\"duck\\" }\\n```","params":[{"name":"Start","desc":"","lua_type":"number?"},{"name":"End","desc":"","lua_type":"number?"}],"returns":[{"desc":"","lua_type":"{ T }"}],"function_type":"method","since":"1.0.0","source":{"line":773,"path":"src/init.lua"}},{"name":"forEach","desc":"Performs a for loop on the array with a given callback which doesn\'t affect any entries.\\n\\n```lua\\nlocal myArray = Array.new(\\"ant\\", \\"bison\\", \\"camel\\", \\"duck\\", \\"elephant\\")\\nmyArray:forEach(print)\\n```","params":[{"name":"Callback","desc":"","lua_type":"Callback: (data: T, index: number, array: { T }) -> ()"},{"name":"_reverse","desc":"","lua_type":"boolean?"}],"returns":[{"desc":"","lua_type":"Array<T>"}],"function_type":"method","tags":["Chainable"],"since":"1.0.0","source":{"line":810,"path":"src/init.lua"}},{"name":"every","desc":"Performs a test on every element within the array to ensure they all pass.\\n\\n```lua\\nlocal myArray = Array.new(\\"ant\\", \\"bison\\", \\"camel\\", \\"duck\\", \\"elephant\\")\\nmyArray:every(function(animal: string)\\n\\treturn string.len(animal) > 2\\nend) -- true\\n```","params":[{"name":"Callback","desc":"","lua_type":"Callback: (data: T, index: number, array: { T }) -> boolean"}],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"method","since":"1.0.0","source":{"line":844,"path":"src/init.lua"}},{"name":"push","desc":"Adds new element(s) onto the end of the array.\\n\\n```lua\\nlocal myArray = Array.new(\\"ant\\", \\"bison\\", \\"camel\\", \\"duck\\", \\"elephant\\")\\nmyArray:push(\\"duck\\", \\"elephant\\") -- { \\"ant\\", \\"bison\\", \\"camel\\", \\"duck\\", \\"elephant\\", \\"duck\\", \\"elephant\\" }\\n```","params":[{"name":"...","desc":"","lua_type":"T"}],"returns":[{"desc":"","lua_type":"arrayPriv<any>\\r\\n"}],"function_type":"method","since":"1.0.0","source":{"line":869,"path":"src/init.lua"}},{"name":"pop","desc":"Removes the last element within the array and returns whatever it\'s value is.\\n\\n```lua\\nlocal myArray = Array.new(\\"ant\\", \\"bison\\", \\"camel\\", \\"duck\\", \\"elephant\\")\\nmyArray:pop() -- \\"elephant\\"\\nmyArray:pop() -- \\"duck\\"\\n```","params":[],"returns":[{"desc":"","lua_type":"T"}],"function_type":"method","since":"1.0.0","source":{"line":892,"path":"src/init.lua"}},{"name":"sort","desc":"Uses QuickSort under the hood to complete this operation, if you\'d like to use it directly with specifying a `start` and `end` indices please use `Array:_quickSort`\\n\\n```lua\\nlocal myArray = Array.new(\\"ant\\", \\"bison\\", \\"camel\\", \\"duck\\", \\"elephant\\")\\nmyArray:sort(function(first: string, second: string)\\n\\tlocal firstChar, secondChar = string.sub(first, 1, 1), string.sub(second, 1, 1)\\n\\treturn string.byte(firstChar) > string.byte(secondChar)\\nend) --\x3e \\"elephant\\", \\"duck\\", \\"camel\\", \\"bison\\", \\"ant\\"\\n```","params":[{"name":"Callback","desc":"","lua_type":"((a: T, b: T) -> boolean)?"}],"returns":[{"desc":"","lua_type":"Array<T>"}],"function_type":"method","tags":["Chainable"],"since":"1.0.0","source":{"line":917,"path":"src/init.lua"}},{"name":"reverse","desc":"Removes the last element within the array and returns whatever it\'s value is.\\n\\n```lua\\nlocal myArray = Array.new(\\"ant\\", \\"bison\\", \\"camel\\", \\"duck\\", \\"elephant\\")\\nmyArray:pop() -- \\"elephant\\"\\nmyArray:pop() -- \\"duck\\"\\n```\\n\\n:::warning\\nThis method mutates the original array, please use `toReversed()` if you\'d prefer this method without mutations.\\n:::","params":[],"returns":[{"desc":"","lua_type":"{ T }\\r\\n"}],"function_type":"method","tags":["Chainable"],"since":"1.0.0","source":{"line":948,"path":"src/init.lua"}},{"name":"splice","desc":"Changes the contents within the array by removing/replacing/adding new elements.\\n\\n```lua\\nlocal myArray = Array.new(\\"ant\\", \\"bison\\", \\"camel\\", \\"duck\\", \\"elephant\\")\\nmyArray:splice(1, 1, \\"spider\\")\\nprint(myArray[1]) -- \\"spider\\"\\n```","params":[{"name":"index","desc":"","lua_type":"number"},{"name":"deleteCount","desc":"","lua_type":"number"},{"name":"...","desc":"","lua_type":"T"}],"returns":[{"desc":"","lua_type":"Array<T>"}],"function_type":"method","tags":["Chainable"],"since":"1.0.0","source":{"line":978,"path":"src/init.lua"}},{"name":"fill","desc":"Changes all elements within the array with a static value at a given start position.\\n\\n```lua\\nlocal myArray = Array.new(1, 2, 3, 4)\\nmyArray:fill(0, 2, 4) --\x3e 1, 2, 0, 0\\nmyArray:fill(5, 1) --\x3e 1, 5, 5, 5\\nmyArray:fill(4) --\x3e 4, 4, 4, 4\\n```","params":[{"name":"...","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"Array<T>"}],"function_type":"method","tags":["Chainable"],"since":"1.0.0","source":{"line":1020,"path":"src/init.lua"}},{"name":"values","desc":"Returns the internal table that holds all the values.\\n\\n```lua\\nlocal myArray = Array.new(1, 2, 3, 4)\\nprint(myArray:values()) --\x3e { 1, 2, 3, 4 }\\n```","params":[],"returns":[{"desc":"","lua_type":"{ T }"}],"function_type":"method","since":"1.0.0","source":{"line":1046,"path":"src/init.lua"}},{"name":"entries","desc":"Returns an iterator object that contains the key/value pairs for each array index.\\n\\n```lua\\nlocal myArray = Array.new(\\"ant\\", \\"bison\\", \\"camel\\")\\nlocal myIterator = myArray:entries()\\nprint(myIterator:next().Value) --\x3e Array [ 1, \\"ant\\" ]\\nprint(myIterator:next().Value) --\x3e Array [ 2, \\"bison\\" ]\\n```","params":[],"returns":[{"desc":"","lua_type":"ArrayIterator<T>"}],"function_type":"method","since":"1.0.0","source":{"line":1065,"path":"src/init.lua"}},{"name":"toSpliced","desc":"Returns a new Array after `splice` has been invoked.","params":[{"name":"index","desc":"","lua_type":"number"},{"name":"deleteCount","desc":"","lua_type":"number"},{"name":"...","desc":"","lua_type":"T"}],"returns":[{"desc":"","lua_type":"Array<T>"}],"function_type":"method","since":"1.0.0","source":{"line":1080,"path":"src/init.lua"}},{"name":"toReversed","desc":"Returns a new Array after `reverse` has been invoked.","params":[],"returns":[{"desc":"","lua_type":"Array<T>"}],"function_type":"method","since":"1.0.0","source":{"line":1095,"path":"src/init.lua"}},{"name":"toSorted","desc":"Returns a new Array after `sort` has been invoked.","params":[{"name":"Callback","desc":"","lua_type":"((a: T, b: T) -> boolean)?"}],"returns":[{"desc":"","lua_type":"Array<T>"}],"function_type":"method","since":"1.0.0","source":{"line":1111,"path":"src/init.lua"}},{"name":"lastIndexOf","desc":"Provides the index starting from the back of the Array. This will return `nil` if no value is present.","params":[{"name":"item","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"number?"}],"function_type":"method","since":"1.0.0","source":{"line":1127,"path":"src/init.lua"}},{"name":"at","desc":"Returns the element at a given index.\\n\\n```lua\\nlocal myArray = Array.new(\\"ant\\", \\"bison\\", \\"camel\\", \\"duck\\", \\"elephant\\")\\nmyArray:Destroy() -- Once used this can\'t be used again.\\n```","params":[{"name":"index","desc":"","lua_type":"number?"}],"returns":[{"desc":"","lua_type":"T?"}],"function_type":"method","since":"1.0.0","source":{"line":1150,"path":"src/init.lua"}},{"name":"concat","desc":"Merges one or more into a single Array.\\n\\n```lua\\nlocal myArray = Array.new(\\"ant\\", \\"bison\\")\\nlocal secondArray = Array.new(1, 2, 3)\\nmyArray:concat(secondArray) -- Array [ \\"ant\\", \\"bison\\", 1, 2, 3 ]\\n```","params":[{"name":"...","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"Array<T>"}],"function_type":"method","tags":["Chainable"],"since":"1.0.0","source":{"line":1172,"path":"src/init.lua"}},{"name":"join","desc":"Joins the array based on the separator.\\n\\n```lua\\nlocal myArray = Array.new(\\"ant\\", \\"bison\\")\\nprint(myArray:join(\\"-\\")) -- \\"ant-bison\\"\\n```","params":[{"name":"separator","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"string"}],"function_type":"method","since":"1.0.0","source":{"line":1209,"path":"src/init.lua"}},{"name":"with","desc":"Mimics bracket-notation, returning a new Array with the index replaced with the value.\\n\\n```lua\\nlocal myArray = Array.new(\\"ant\\", \\"bison\\", \\"camel\\")\\nlocal fixedArray = myArray:with(3, \\"Cone\\") -- Array [ \\"ant\\", \\"bison\\", \\"Cone\\" ]\\n```","params":[{"name":"index","desc":"","lua_type":"number"},{"name":"value","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"Array<T>"}],"function_type":"method","since":"1.0.0","source":{"line":1243,"path":"src/init.lua"}},{"name":"indexOf","desc":"Finds the index of an element from left to right. Returns a `-1` if the element can\'t be found.\\n\\n```lua\\nlocal myArray = Array.new(\\"ant\\", \\"bison\\", \\"camel\\")\\nprint(myArray:indexOf(\\"bison\\")) -- 2\\n```","params":[{"name":"item","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"number"}],"function_type":"method","since":"1.0.0","source":{"line":1264,"path":"src/init.lua"}},{"name":"unshift","desc":"Adds element(s) to the beginning of the array and returns the length.\\n\\n```lua\\nlocal myArray = Array.new(\\"ant\\", \\"bison\\", \\"camel\\")\\nprint(myArray:unshift(\\"something\\")) -- 4\\nprint(myArray:join(\\",\\")) -- \\"something,ant,bison,camel\\"\\n```","params":[{"name":"...","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"number"}],"function_type":"method","since":"1.0.0","source":{"line":1288,"path":"src/init.lua"}},{"name":"shift","desc":"Removes a single element from the beginning of the Array and returns it\'s value.\\n\\n```lua\\nlocal myArray = Array.new(\\"ant\\", \\"bison\\", \\"camel\\")\\nprint(myArray:shift()) -- \\"ant\\"\\nprint(myArray:join(\\",\\")) -- \\"bison,camel\\"\\n```","params":[],"returns":[{"desc":"","lua_type":"T"}],"function_type":"method","since":"1.0.0","source":{"line":1313,"path":"src/init.lua"}},{"name":"Destroy","desc":"Clears the Array and prepares it for garbage collection.\\n\\n```lua\\nlocal myArray = Array.new(\\"ant\\", \\"bison\\", \\"camel\\", \\"duck\\", \\"elephant\\")\\nmyArray:Destroy() -- Once used this can\'t be used again.\\n```","params":[],"returns":[{"desc":"","lua_type":"nil"}],"function_type":"method","since":"1.0.0","source":{"line":1331,"path":"src/init.lua"}}],"properties":[],"types":[],"name":"Array","desc":"A data structure with multiple JavaScript-like methods attached to it.","source":{"line":93,"path":"src/init.lua"}}')}}]);